# 基于 LLVM 的代码风格
BasedOnStyle: LLVM

# 访问修饰符（public/private/protected）的缩进偏移量，相对于类的缩进
AccessModifierOffset: -4

# 左括号 ( 后的对齐方式
# Align: 将参数与第一个参数对齐
# DontAlign: 不对齐
# AlwaysBreak: 总是在左括号后换行
# AlignAfterOpenBracket: 如果第一个参数不在同一行，则与左括号对齐
AlignAfterOpenBracket: Align

# 是否对齐连续的赋值语句
AlignConsecutiveAssignments: false

# 是否对齐连续的声明语句
AlignConsecutiveDeclarations: false

# 是否对齐连续的宏定义
AlignConsecutiveMacros: true

# 对换行符 \ 的对齐方式
# None: 不对齐
# Left: 左对齐
# Right: 右对齐
AlignEscapedNewlines: Right

# 是否对齐二元运算符的操作数
AlignOperands: true

# 是否对齐行尾注释
AlignTrailingComments: true

# 是否允许函数声明的所有参数放在下一行
AllowAllParametersOfDeclarationOnNextLine: false

# 是否允许将短的代码块放在同一行 (例如 `if (cond) return;`)
AllowShortBlocksOnASingleLine: true

# 是否允许将短的 case 标签放在同一行 (例如 `case 1: return;`)
AllowShortCaseLabelsOnASingleLine: true

# 是否允许将短的函数定义放在同一行
# None: 根据 BreakBeforeBraces 的设置
# Empty: 仅允许空函数
# Inline: 允许短的非虚函数
# All: 允许所有短函数
AllowShortFunctionsOnASingleLine: None

# 是否允许将短的 if 语句放在同一行
AllowShortIfStatementsOnASingleLine: true

# 是否允许将短的循环语句放在同一行
AllowShortLoopsOnASingleLine: true

# 返回类型后是否总是换行
# None: 不强制换行
# All: 总是换行
# Definition: 在函数定义中换行
# Declaration: 在函数声明中换行
AlwaysBreakAfterReturnType: None

# 多行字符串字面量前是否总是换行
AlwaysBreakBeforeMultilineStrings: false

# 模板声明后是否总是换行 (例如 `template <typename T> class Foo`)
AlwaysBreakTemplateDeclarations: true

# 是否将函数参数打包放在一行
BinPackArguments: true

# 是否将函数形参打包放在一行
BinPackParameters: true

# 大括号 {} 的换行风格
BraceWrapping:
  # 类定义后的大括号
  AfterClass: false
  # 控制语句 (if/for/while/do) 后的大括号
  AfterControlStatement: false
  # 枚举定义后的大括号
  AfterEnum: false
  # 函数定义后的大括号
  AfterFunction: false
  # 命名空间定义后的大括号
  AfterNamespace: false
  # 结构体定义后的大括号
  AfterStruct: false
  # 联合体定义后的大括号
  AfterUnion: false
  # extern "C" 等外部块后的大括号
  AfterExternBlock: false
  # catch 语句前的大括号
  BeforeCatch: false
  # else 语句前的大括号
  BeforeElse: false
  # 大括号内的代码是否缩进
  IndentBraces: false
  # 是否拆分空函数的大括号 (放在不同行)
  SplitEmptyFunction: false
  # 是否拆分空结构体/类的大括号
  SplitEmptyRecord: false
  # 是否拆分空命名空间的大括号
  SplitEmptyNamespace: false

# 二元运算符前的换行风格
# None: 不换行
# NonAssignment: 除了赋值运算符，其他二元运算符前都换行
# All: 所有二元运算符前都换行
BreakBeforeBinaryOperators: NonAssignment

# 大括号 {} 前的换行风格
# Custom: 根据子选项配置
# Attach: (默认) 将大括号放在上一行的末尾
# Break: 在大括号前换行
# Linux: 类似于 Attach，但函数定义、控制语句和类/结构体/联合体定义的大括号前换行
# Mozilla: 类似于 Attach，但枚举、函数定义、记录定义和命名空间的大括号前换行
# Stroustrup: 类似于 Break，但函数定义的大括号不换行
# Allman: 总是在大括号前换行
# WebKit: 类似于 Attach，但函数定义、控制语句、类/结构体/联合体和枚举定义的大括号前换行
BreakBeforeBraces: Custom

# 三元运算符 ?: 前是否换行
BreakBeforeTernaryOperators: false

# 构造函数初始化列表的换行风格
# AfterColon: 在冒号后换行
# BeforeComma: 在逗号前换行
# AfterComma: 在逗号后换行
BreakConstructorInitializers: AfterColon

# 是否拆分长的字符串字面量
BreakStringLiterals: false

# 列限制，0 表示不限制
ColumnLimit: 0

# 是否压缩嵌套的命名空间 (例如 `namespace a { namespace b { ... } }` 变成 `namespace a::b { ... }`)
CompactNamespaces: true

# 构造函数初始化列表是否放在一行或每个初始化器一行
ConstructorInitializerAllOnOneLineOrOnePerLine: false

# 构造函数初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 4

# 连续行的缩进宽度
ContinuationIndentWidth: 4

# 是否启用 C++11 统一初始化列表的风格 (例如 `int x[]{1, 2, 3};`)
Cpp11BracedListStyle: true

# 是否从指针类型推导对齐方式 (例如 `int*` 和 `int *` 的对齐可能不同)
DerivePointerAlignment: false

# 是否修复命名空间注释 (在结束大括号后添加 `// namespace`)
FixNamespaceComments: true

# case 标签是否缩进
IndentCaseLabels: false

# 预处理指令 (#if/#define 等) 的缩进风格
# None: 不缩进
# AfterHash: 在 # 后缩进
IndentPPDirectives: None

# 缩进宽度
IndentWidth: 4

# 是否缩进换行的函数名
IndentWrappedFunctionNames: false

# 是否保留代码块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: false

# 保留的最大连续空行数
MaxEmptyLinesToKeep: 1

# 命名空间的缩进风格
# None: 不缩进
# Inner: 命名空间内的代码缩进
# All: 命名空间本身也缩进 (不常见)
NamespaceIndentation: None

# 指针和引用的对齐方式
# Left: 类型和 * 或 & 之间没有空格，* 或 & 和变量名之间有空格 (例如 `int* p`)
# Right: 类型和 * 或 & 之间有空格，* 或 & 和变量名之间没有空格 (例如 `int *p`)
# Middle: 类型和 * 或 & 之间没有空格，* 或 & 和变量名之间也没有空格 (例如 `int*p`)
PointerAlignment: Right

# 是否自动调整注释的格式以适应列宽
ReflowComments: true

# 是否对包含的头文件进行排序
SortIncludes: false

# 是否对 using 声明进行排序
SortUsingDeclarations: false

# C 风格类型转换后是否添加空格 (例如 `(int)x`)
SpaceAfterCStyleCast: false

# 模板关键字 (template) 后是否添加空格
SpaceAfterTemplateKeyword: true

# 赋值运算符 (=) 前是否添加空格
SpaceBeforeAssignmentOperators: true

# 控制语句 (if/for/while/switch) 的圆括号前是否添加空格
SpaceBeforeParens: ControlStatements

# 空圆括号 () 内是否添加空格
SpaceInEmptyParentheses: false

# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 1

# 在尖括号的<后和>前添加空格
SpacesInAngles: false

# C 风格类型转换的圆括号内是否添加空格 (例如 `( int )x`)
SpacesInCStyleCastParentheses: false

# 容器字面量 (例如 `{1, 2, 3}`) 的大括号内是否添加空格
SpacesInContainerLiterals: true

# 圆括号 () 内是否添加空格
SpacesInParentheses: false

# 方括号 [] 内是否添加空格
SpacesInSquareBrackets: false

# 使用的 C++ 标准
Standard: Cpp11

# Tab 宽度
TabWidth: 4

# 是否使用 Tab 进行缩进 (true) 或空格 (false)
UseTab: Never
